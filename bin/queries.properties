<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
    <!-- Database -->
    
    <entry key = "createPackage">
    	CREATE TABLE Package (
    		idPackage VARCHAR(255),
    		PRIMARY KEY(idPackage)   	
    	)
    </entry>
   
     <entry key = "createModuleToPackage">
    	CREATE TABLE PackageToModule (
    		id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY, 
    		idPackage VARCHAR(255),
    		idModule  VARCHAR(255)
    	)
    </entry> 
    
    <entry key = "createModule">
		CREATE TABLE Module (
			  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,   
			  idModule VARCHAR(255) ,
			  type VARCHAR(255)
			)
    </entry>
    
    <entry key = "createModuleToModule">
    	CREATE TABLE ModuleToModule (
    		  idModule1 VARCHAR(255),
    		  idModule2 VARCHAR(255)
    		)
    </entry>
    
    
	<entry key = "createMethod">
		CREATE TABLE Method (
		  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,   
		  idModule VARCHAR(255),
		  idMethod VARCHAR(255),
		  signature VARCHAR(500),
		  type VARCHAR(255) ,
		  visibility VARCHAR(255),
		  return VARCHAR(255)
		)
	</entry>
	

    <entry key = "createPropertyLocal">
    	CREATE TABLE PropertyLocal (
    	  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,   
    	  idModule VARCHAR(255),
    	  idMethod VARCHAR(255),
    	  signature VARCHAR(500),
		  idProperty VARCHAR(255) ,
		  kind VARCHAR(255),
		  type VARCHAR(255)
		)

	</entry>
		
	<entry key = "createPropertyGlobal">
		CREATE TABLE PropertyGlobal(
			  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,   
			  idModule VARCHAR(255),
			  idProperty VARCHAR(255) ,
			  kind VARCHAR(255),
			  type VARCHAR(255)
		)
	</entry>
	
	<entry key = "createCalls">
    	CREATE TABLE Calls (   
		  idCall INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
		  idModule VARCHAR(255),
		  idMethod VARCHAR(255),
		  signature VARCHAR(500),
		  idModuleCaller VARCHAR(255),
		  idCaller VARCHAR(255),
		  signatureCaller VARCHAR(500)
		)
    </entry>
    
    <entry key = "createImports">
    	CREATE TABLE Imports (
		  idModule VARCHAR(255),
		  idImport VARCHAR(255)
		)
    </entry>
    
    <entry key= "createTemporalTable">
    	CREATE TABLE Elements(element VARCHAR(255))
    </entry>
    
    <!-- Populate DataBase -->
     <!-- Database -->
     
     <!-- Queries INSERT -->
     <entry key ="insertPackage">
     	INSERT INTO Package(idPackage) VALUES (?)
     </entry>
     <entry key= "insertModule">
     	INSERT INTO Module(id,idModule,type) VALUES(DEFAULT,?,?)
     </entry>
     <entry key= "insertPackageModule">
     	INSERT INTO PackageToModule(id,idPackage,idModule) VALUES (DEFAULT,?,?)
     </entry>
     <entry key="insertModuleModule">
     	INSERT INTO ModuleToModule(idModule1,idModule2) VALUES (?,?)
     </entry>
     <entry key = "insertMethod">
     	INSERT INTO Method(id,idMethod,idModule,signature,type,visibility,return) VALUES(DEFAULT,?,?,?,?,?,?)
     </entry>
     <entry key = "insertPropertyGlobal">
     	INSERT INTO PropertyGlobal(id,idModule,idProperty,kind,type) VALUES(DEFAULT,?,?,?,?)
     </entry>
      <entry key = "insertPropertyLocal">
     	INSERT INTO PropertyLocal(id,idModule,idMethod,signature,idProperty,kind,type) VALUES(DEFAULT,?,?,?,?,?,?)
     </entry>
     <entry key = "insertCalls">
     	INSERT INTO Calls(idCall,idModule,idMethod,signature, idModuleCaller, idCaller, signatureCaller) VALUES (DEFAULT,?,?,?,?,?,?)
     </entry>
      <entry key = "insertImports">
     	INSERT INTO Imports(idModule,idImport) VALUES (?,?)
     </entry>
     <entry key= "insertTemporal" >
     	INSERT INTO Elements(element) VALUES (?)
     </entry>
     <entry key="populateTables">
		INSERT INTO Module(id,idModule,type) VALUES(DEFAULT,'Anonymous type','ClassUnit')
	 </entry>
     
     <!-- Queries INSERT-->
     <!-- Queries SELECT-->
     <entry key="selectMethod">
     	SELECT CASE WHEN COUNT(*) >= 0 THEN COUNT(*) ELSE 0 END AS COUNT FROM METHOD WHERE idModule = ? AND idMethod = ? AND signature = ?
     </entry>
      <entry key="getNClasses">
     	SELECT CASE WHEN COUNT(*) >= 0 THEN COUNT(*) ELSE 0 END AS COUNT FROM MODULE WHERE TYPE = 'Class'
     </entry>
      <entry key="getNInterfaces">
     	SELECT CASE WHEN COUNT(*) >= 0 THEN COUNT(*) ELSE 0 END AS COUNT FROM MODULE WHERE TYPE = 'Interface'
     </entry>
      <entry key="getNMethods">
     	SELECT CASE WHEN COUNT(*) >= 0 THEN COUNT(*) ELSE 0 END AS COUNT FROM METHOD 
     </entry>
     <entry key="getNProperties">	
     	SELECT CASE WHEN SUM(CONT) >= 0 THEN SUM(CONT) ELSE 0 END AS CONT
		FROM 
		(
 			SELECT COUNT(*) AS CONT FROM PROPERTYLOCAL 
 			UNION
 			SELECT COUNT(*) AS CONT FROM PROPERTYGLOBAL
		) A
     </entry>
     <entry key="fanin">
     	SELECT IDMODULE,IDMETHOD, CASE WHEN COUNT(*) >= 0 THEN COUNT(*) ELSE 0 END AS COUNT FROM CALLS GROUP BY IDMODULE,IDMETHOD ORDER BY COUNT DESC
     </entry>
     
  	 <entry key="ccPropertyLibrary">
      <![CDATA[ 
      
   	   SELECT DISTINCT MO.IDMODULE    AS MODULE, 
 			  ME.IDMETHOD    AS METHOD, 
 			  ME.TYPE        AS METHOD_TYPE, 
 			  ME.RETURN      AS METHOD_RTN, 
 			  PL.IDPROPERTY  AS PROPERTY, 
 			  PL.TYPE AS PROPERTY_TYPE, 
 		 	  PL.KIND AS PROPERTY_KIND
       FROM   IMPORTS I  INNER JOIN MODULE MO ON I.IDMODULE = MO.IDMODULE
				  	     INNER JOIN METHOD ME ON ME.IDMODULE = MO.IDMODULE 
					     INNER JOIN PROPERTYLOCAL PL ON  ME.IDMETHOD = PL.IDMETHOD AND ME.IDMODULE = PL.IDMODULE AND ME.SIGNATURE = PL.SIGNATURE
	   WHERE  I.IDIMPORT LIKE ? AND PL.TYPE IN (SELECT element FROM Elements)
	   UNION ALL
	   SELECT DISTINCT  MO.IDMODULE AS MODULE, 
						  '-' AS METHOD, 
						  '' AS METHOD_TYPE ,
						  '' AS METHOD_RTN, 
			   PG.IDPROPERTY AS PROPERTY, 
			         PG.TYPE AS PROPERTY_TYPE, 
			         PG.KIND AS PROPERTY_KIND
		FROM		      IMPORTS I INNER JOIN MODULE MO ON I.IDMODULE = MO.IDMODULE
		 	   		                INNER JOIN PROPERTYGLOBAL PG ON  PG.IDMODULE = MO.IDMODULE
		WHERE I.IDIMPORT LIKE ? AND PG.TYPE IN (SELECT element FROM Elements) 
		]]>
     </entry>
     
     <entry key="ccMethodLibrary">
       SELECT DISTINCT M.IDMODULE    AS MODULE, 
			  ME.IDMETHOD   AS METHOD, 
			  ME.TYPE       AS METHOD_TYPE, 
			  ME.RETURN     AS METHOD_RTN
		FROM IMPORTS I    INNER JOIN MODULE M ON I.IDMODULE = M.IDMODULE
					   INNER JOIN METHOD ME ON ME.IDMODULE = M.IDMODULE 
		WHERE  I.IDIMPORT LIKE ? AND  ME.RETURN IN (SELECT element FROM Elements) 
     </entry>
     
     <entry key="getAllProperties">
     	SELECT *
		FROM 
		(
 			SELECT IDMODULE,IDMETHOD AS METHOD, IDPROPERTY,KIND FROM PROPERTYLOCAL WHERE  LENGTH(IDPROPERTY) > 1
 			UNION
 			SELECT IDMODULE, '-' AS METHOD, IDPROPERTY, KIND  FROM PROPERTYGLOBAL WHERE  LENGTH(IDPROPERTY) > 1
		) A
     	
     	
     </entry>
     
     <entry key="getAllMethods">
     	SELECT IDMODULE, IDMETHOD FROM METHOD WHERE LENGTH(IDMETHOD) > 1
     </entry>
     
     <entry key="getAllMethodsFilter">
     	SELECT IDMODULE, IDMETHOD 
     	FROM METHOD 
     	WHERE IDMETHOD NOT LIKE 'get%' AND 
     		  IDMETHOD NOT LIKE 'set%' AND 
     		  LENGTH(IDMETHOD) > 1
     </entry>
     <!-- Queries SELECT-->
     
     <!-- Queries DELETE-->
     
     <entry key="deleteTemporal">
		DELETE FROM ELEMENTS
	 </entry>     
     
     <!-- Queries DELETE-->
     
     <!--Query BaseX-->
     <entry key = "propertyAnnotation-1">
        declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
    	declare variable $tag as xs:string external;
    	declare variable $class as xs:string external;
    	declare variable $method as xs:string external;
    	declare variable $property as xs:string external;
    	declare variable $kind as xs:string external;
    
    	for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
    			  //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
    			  //codeElement[@xsi:type="code:MethodUnit" and @name=$method]
    			  //codeElement[@xsi:type="code:StorableUnit" and @name=$property and @kind=$kind]
		return insert node fn:parse-xml($tag) as first into $a 
    </entry>
     
     <entry key = "propertyAnnotation-2">
        declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
    	declare variable $tag as xs:string external;
    	declare variable $class as xs:string external;
    	declare variable $property as xs:string external;

    
    	for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
    			  //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
    			  //codeElement[@xsi:type="code:StorableUnit" and @name=$property]
		return insert node fn:parse-xml($tag) as first into $a 
    </entry> 
    
    <entry key = "methodAnnotation">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
    	declare variable $tag as xs:string external;
    	declare variable $class as xs:string external;
    	declare variable $method as xs:string external;
    	
    	for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
    			  //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
    			  //codeElement[@xsi:type="code:MethodUnit" and @name=$method]
		return insert node fn:parse-xml($tag) as first into $a 
    	
    </entry>
    
    <entry key = "propertyAnnotationRemove-1">
       	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $concern as xs:string external;
		declare variable $class as xs:string external;
		declare variable $property as xs:string external;
		declare variable $method as xs:string external;
		declare variable $kind as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
		    //codeElement[@xsi:type="code:MethodUnit" and @name=$method]
		    //codeElement[@xsi:type="code:StorableUnit" and @name=$property and @kind=$kind]
		    /attribute[@value=$concern]
		return  delete node $a
    </entry>
    
     <entry key = "propertyAnnotationRemove-2">
       declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $concern as xs:string external;
		declare variable $class as xs:string external;
		declare variable $property as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
		    //codeElement[@xsi:type="code:StorableUnit" and @name=$property]
		    /attribute[@value=$concern]
		return delete node $a
    </entry> 
    
    <entry key = "methodAnnotationRemove">
        	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $concern as xs:string external;
		declare variable $class as xs:string external;
		declare variable $method as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
		    //codeElement[@xsi:type="code:MethodUnit" and @name=$method]
		    /attribute[@value=$concern]
		return delete node $a
    </entry>  
    
    
    <entry key = "javaAnnotationMining">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		
		declare variable $methodName as xs:string external;

		for $prod in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:MethodUnit"]//codeRelation
		    let $var:= $prod/annotation[@text = "annotation"]
		    let $return := data(($var/..)/@to) || '/' ||data(($var/../..)/@name) || '/' ||data(($var/../../..)/@name)
		return $return
    </entry>
    
    <entry key = "getTypeAnnotation_2">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		
		declare variable $elementPosition as xs:string external;
		
		let $token := tokenize($elementPosition,"_")
		let $prod := data(//kdm:Segment/model[position()=number($token[1])]/codeElement[position()=number($token[2])]/@name)
		return $prod
    </entry>	
    
      <entry key = "getTypeAnnotation_3">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		
		declare variable $elementPosition as xs:string external;
		
		let $token := tokenize($elementPosition,"_")
		let $prod := data(//kdm:Segment/model[position()=number($token[1])]/codeElement[position()=number($token[2])]/codeElement[position()=number($token[3])]/@name)
		return $prod
    </entry>
    
     <entry key = "getTypeAnnotation_4">
    	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		
		declare variable $elementPosition as xs:string external;
		
		let $token := tokenize($elementPosition,"_")
		let $prod := data(//kdm:Segment/model[position()=number($token[1])]/codeElement[position()=number($token[2])]/codeElement[position()=number($token[3])]/codeElement[position()=number($token[4])]/@name)
		return $prod
    </entry>
    
    <entry key = "getConcernLibrary">
    	
    	declare variable $elementPosition as xs:string external;

		let $var := doc("CL")//Concern[@name=$elementPosition]
		for $i in $var//Element
		return data(($i/../@name))|| "." || $i
    
    </entry>
    
    <!-- Checking if annotation exist--> 
    
    <entry key = "check-2"> 
     	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $concern as xs:string external;
		declare variable $class as xs:string external;
		declare variable $property as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
		    //codeElement[@xsi:type="code:StorableUnit" and @name=$property]
		    /attribute[@value=$concern]/data(@value)
		return $a
    </entry>
    
     <entry key = "check-1"> 
     	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $concern as xs:string external;
		declare variable $class as xs:string external;
		declare variable $property as xs:string external;
		declare variable $method as xs:string external;
		declare variable $kind as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
		    //codeElement[@xsi:type="code:MethodUnit" and @name=$method]
		    //codeElement[@xsi:type="code:StorableUnit" and @name=$property and @kind=$kind]
		    /attribute[@value=$concern]/data(@value)
		return $a
    </entry>
    
    <entry key = "check-3"> 
     	declare namespace xmi="http://www.omg.org/XMI";
		declare namespace xsi="http://www.w3.org/2001/XMLSchema-instance";
		declare namespace action="http://www.eclipse.org/MoDisco/kdm/action";
		declare namespace code="http://www.eclipse.org/MoDisco/kdm/code";
		declare namespace kdm="http://www.eclipse.org/MoDisco/kdm/kdm";
		declare namespace source="http://www.eclipse.org/MoDisco/kdm/source";
		declare variable $concern as xs:string external;
		declare variable $class as xs:string external;
		declare variable $method as xs:string external;
		
		for $a in //kdm:Segment/model[@xsi:type="code:CodeModel" and @name != "externals"]
		    //codeElement[@xsi:type="code:ClassUnit" and @name=$class]
		    //codeElement[@xsi:type="code:MethodUnit" and @name=$method]
		    /attribute[@value=$concern]/data(@value)
		return $a
    </entry>
     
  
     
</properties>